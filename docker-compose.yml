version: '2.3'

volumes:
  app:
  blazegraph:
  db:
  fcrepo:
  redis:
  solr:

networks:
  external:
  internal:

services:
  ##
  # Run blazegraph and persist data across sessions.
  blazegraph:
    image: lyrasis/blazegraph:2.1.4
    expose:
      - 8080
    volumes:
      - blazegraph:/var/lib/jetty
    networks:
      internal:

  ##
  # Run SOLR, precreating a core related to the RAILS_ENV currently set, persists data across sessions in a named volume.
  solr:
    image: solr:alpine
    expose:
      - 8983
    volumes:
      - solr:/opt/solr/server/solr/mycores
      - ./solr/conf:/opt/solr/server/solr/configsets/_default/conf
    entrypoint:
      - docker-entrypoint.sh
      - solr-precreate
      - hydra-${RAILS_ENV}
    networks:
      internal:

  ##
  # Run Fedora repository, persisting data in a volume across sessions.
  fcrepo:
    image: nulib/fcrepo4
    expose:
      - 8080
    volumes:
      - fcrepo:/data
    environment:
      - JAVA_OPTS=${JAVA_OPTS} -Dfcrepo.modeshape.configuration="classpath:/config/file-simple/repository.json" -Dfcrepo.object.directory="/data/objects" -Dfcrepo.binary.directory="/data/binaries"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/rest"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      internal:

  ##
  # Run an instance of MySQL with a database named 'development' for running specs. See config/database.yml
  db:
    image: mysql:5.7
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=12341234
      - MYSQL_USER=root
      - MYSQL_PASSWORD=12341234
      - MYSQL_DATABASE=development
    volumes:
      - db:/var/lib/mysql
      - ./config/mysql/mysqld.cnf:/etc/mysql/conf.d/custom.cnf
    networks:
      internal:

  ##
  # Run an instance of MySQL with a database named 'test' for running specs. See config/database.yml. Has no volume
  # and doesn't intend on persisting data across sessions.
  db_test:
    image: mysql:5.7
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=12341234
      - MYSQL_USER=root
      - MYSQL_PASSWORD=12341234
      - MYSQL_DATABASE=test
    volumes:
      - ./config/mysql/mysqld.cnf:/etc/mysql/conf.d/custom.cnf
    networks:
      internal:

  ##
  # Basic image for the rails application server, see Dockerfile
  app:
    build: .
    volumes:
      - .:/data
      - app:/data/tmp/uploads
    networks:
      internal:

  ##
  # Run the application in the currently set RAILS_ENV, set to development by default in the .env file.
  web:
    extends: app
    # Ideally we will replace this set of commands with an entrypoint script that checks to see if these
    # have been run already have been run and if so it just starts the server without the first three commands
    # taking time to run.
    command: >
      bash -c "bundle exec rails hyrax:default_admin_set:create
      && bundle exec rails hyrax:default_collection_types:create
      && bundle exec rails hyrax:workflow:load
      && rm -f tmp/pids/server.pid
      && bundle exec rails server -p 3000 -b '0.0.0.0' -e ${RAILS_ENV}"
    depends_on:
      db:
        condition: service_started
      db_test:
        condition: service_started
      solr:
        condition: service_started
      fcrepo:
        condition: service_healthy
      redis:
        condition: service_started
      memcache:
        condition: service_started
      initialize_blazegraph:
        condition: service_started
      db_migrate:
        condition: service_started
    expose:
      - 3000
    links:
      - db
      - db_test
      - fcrepo
      - solr
      - redis

  ##
  # Runs sidekiq to process background jobs
  workers:
    extends: app
    command: bundle exec sidekiq
    depends_on:
      - db
      - db_test
      - solr
      - fcrepo
      - redis
      - initialize_blazegraph
      - db_migrate
    links:
      - db
      - db_test
      - fcrepo
      - solr
      - redis

  ##
  # Could be used to bootstrap some data or the application state before running
  #initialize_app:
  #  extends: app
  #  restart: on-failure
  #  command: echo 'not used'

  ##
  # Using the app image (because it has BASH), ensure that the blazegraph namespaces for test and development exist
  initialize_blazegraph:
    extends: app
    restart: on-failure
    depends_on:
      - blazegraph
    links:
      - blazegraph
    command: >
      bash -c "curl -v -X POST -d 'com.bigdata.rdf.sail.namespace=test' --header 'Content-Type:text/plain' http://blazegraph:8080/bigdata/namespace
      && curl -v -X POST -d 'com.bigdata.rdf.sail.namespace=development' --header 'Content-Type:text/plain' http://blazegraph:8080/bigdata/namespace"

  ##
  # Ensure that the database migrations are run on the appropriate database related to the RAILS_ENV running
  db_migrate:
    extends: app
    restart: on-failure
    command: bundle exec rails db:migrate RAILS_ENV=${RAILS_ENV}
    depends_on:
      - db
      - db_test
    links:
      - db
      - db_test

  ##
  # Load balancer, although not strictly necessary.. would allow the app to work with regular port 80
  lb:
    image: dockercloud/haproxy:1.5.3
    links:
      - web
    environment:
      - DOCKER_TLS_VERIFY
      - DOCKER_HOST
      - DOCKER_CERT_PATH
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # You must uncomment this line if and only if you are running docker-machine
      # - $DOCKER_CERT_PATH:$DOCKER_CERT_PATH
    networks:
      internal:
      external:

  ##
  # Redis for the background job queues
  redis:
    image: redis:alpine
    volumes:
      - redis:/data
    networks:
      internal:

  ##
  # Memcache for rails caching
  memcache:
    image: memcached:alpine
    networks:
      internal:
